<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0066)file://H:\temp\tmpie\Temporary%20Internet%20Files\OLK2\packet.html -->
<HTML><HEAD><TITLE>Das Neue Mix-Paketformat</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<STYLE type=text/css>TD.invisible {
	COLOR: rgb(255,255,255); BACKGROUND-COLOR: rgb(255,255,255)
}
TD.chanid {
	COLOR: rgb(0,0,0); BACKGROUND-COLOR: rgb(255,0,0)
}
TD.key {
	COLOR: rgb(0,0,0); BACKGROUND-COLOR: rgb(0,50,170)
}
TD.payload {
	COLOR: rgb(0,0,0); BACKGROUND-COLOR: rgb(220,220,220)
}
TD.junk {
	COLOR: rgb(0,0,0); BACKGROUND-COLOR: rgb(80,80,80)
}
TD.flags {
	COLOR: rgb(0,0,0); BACKGROUND-COLOR: rgb(0,170,50)
}
</STYLE>

<META content="MSHTML 6.00.2800.1264" name=GENERATOR></HEAD>
<BODY>
<H1>Das Neue Mix-Paketformat</H1>
<P>Wie besprochen auf dem Arbeitstreffen 11.-20.8.2003 in Regensburg</P>
<H2>Upstream-Pakete</H2>
<TABLE cellSpacing=4 cellPadding=6 border=0>
  <TBODY>
  <TR>
    <TD class=invisible width=50></TD>
    <TD class=invisible width=50></TD>
    <TD class=invisible width=50></TD>
    <TD class=invisible width=50></TD>
    <TD class=invisible width=50></TD>
    <TD class=invisible width=50></TD>
    <TD class=invisible width=50></TD>
    <TD class=invisible width=50></TD>
    <TD class=invisible width=50></TD>
    <TD class=invisible width=50></TD></TR>
  <TR>
    <TD class=text colSpan=10>Im 1. Mix, nach erfolgter asymmetrischer und 
      symmetrischer Entschlüsselung:</TD></TR>
  <TR>
    <TD class=chanid>CHAN<BR>4 Bytes</TD>
    <TD class=key>KEY1-UP<BR>16 Bytes</TD>
    <TD class=key>KEY1-DN<BR>16 Bytes</TD>
    <TD class=payload colSpan=7>DATA FOR NEXT MIX (encrypted), 962 Bytes 
      <TABLE width="100%" border=1>
        <TBODY>
        <TR>
          <TD class=key>KEY2-UP<BR>16 Bytes</TD>
          <TD class=key>KEY2-DN<BR>16 Bytes</TD>
          <TD class=payload colSpan=6>DATA FOR MIX AFTER THE NEXT MIX<BR>930 
            Bytes</TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD class=text colSpan=10>Im 2. Mix, nach erfolgter asymmetrischer und 
      symmetrischer Entschlüsselung:</TD></TR>
  <TR>
    <TD class=chanid>CHAN<BR>4 Bytes</TD>
    <TD class=key>KEY2-UP<BR>16 Bytes</TD>
    <TD class=key>KEY2-DN<BR>16 Bytes</TD>
    <TD class=payload colSpan=6>DATA FOR NEXT MIX (encrypted), 930 Bytes 
      <TABLE width="100%" border=1>
        <TBODY>
        <TR>
          <TD class=key>KEY3-UP<BR>16 Bytes</TD>
          <TD class=key>KEY3-DN<BR>16 Bytes</TD>
          <TD class=payload colSpan=6>DATA FOR MIX AFTER THE NEXT MIX<BR>898 
            Bytes</TD></TR></TBODY></TABLE></TD>
    <TD class=junk>RANDOM<BR>32 Bytes</TD></TR>
  <TR>
    <TD class=text colSpan=10>Im n. (letzten) Mix, nach erfolgter 
      asymmetrischer und symmetrischer Entschlüsselung:</TD></TR>
  <TR>
    <TD class=chanid>CHAN<BR>4 Bytes</TD>
    <TD class=key>KEYn-UP<BR>16 Bytes</TD>
    <TD class=key>KEYn-DN<BR>16 Bytes</TD>
    <TD class=flags>VERK<BR>8 Bytes</TD>
    <TD class=flags>SEQN<BR>4 Bytes</TD>
    <TD class=flags>TYPE<BR>1 Byte</TD>
    <TD class=flags>FLG/LEN<BR>2 Bytes</TD>
    <TD class=payload>..................... PAYLOAD 
      .....................<BR>979-32n Bytes</TD>
    <TD class=junk colSpan=2>RANDOM<BR>32(n-1) Bytes</TD></TR></TBODY></TABLE>
<H3>Bedeutung der einzelnen Felder</H3>
<P><STRONG>CHAN:</STRONG> 4-Byte Channel-ID, bezeichnet einen Kanal auf dem 
exakt x (zur Zeit erstmal x=1) Pakete upstream und y Pakete downstream gesendet 
werden, danach wird die Channel-ID ungültig.</P>
<P><STRONG>KEY<I>x</I>-UP:</STRONG> Enthält den 128-bit symmetrischen Schlüssel, 
der zur Verschlüsselung des restlichen Paketes verwendet wurde.</P>
<P><STRONG>KEY<I>x</I>-DN:</STRONG> Enthält den 128-bit symmetrischen Schlüssel, 
der zur Verschlüsselung der Downstream-Pakete auf diesem Kanal verwendet werden 
soll.</P>
<P><STRONG>VERK:</STRONG> Das Verkettungsmerkmal, anhand dessen der letzte Mix 
mehrere Kanäle verketten kann, die zusammen eine logische Verbindung bilden</P>
<P><STRONG>SEQN:</STRONG> Eine Sequenznummer, die die Reihenfolge der auf einer 
logischen Verbindung gesendeten Pakete festlegt.</P>
<P><STRONG>TYPE:</STRONG> Typ der Verbindung, verwendetes Protokoll (z.B. HTTP, 
in Zukunft evtl. auch andere Protokolle</P>
<P><STRONG>FLG/LEN:</STRONG> Kombiniertes Feld, enthält die tatsächliche Länge 
des Payload und mehrere Flags. Die folgende Tabelle zeigt den Aufbau des Feldes: 

<TABLE cellSpacing=4 cellPadding=6>
  <TBODY>
  <TR>
    <TD>15 
    <TD>14 
    <TD>13 
    <TD>12 
    <TD>11 
    <TD>10 
    <TD>9 
    <TD>8 
    <TD>7 
    <TD>6 
    <TD>5 
    <TD>4 
    <TD>3 
    <TD>2 
    <TD>1 
    <TD>0 
  <TR>
    <TD class=payload colSpan=7>FLAGS (7 bit)</TD>
    <TD class=payload colSpan=9>LEN (9 bit)</TD></TR>
  <TR>
    <TD class=flags>RESERVED 
    <TD class=flags>RESERVED 
    <TD class=flags>RESERVED 
    <TD class=flags>RESERVED 
    <TD class=flags>OPEN 
    <TD class=flags>CLOSE 
    <TD class=flags>MORE_DATA 
    <TD class=payload colSpan=9>9 Bit Payload Length (unsigned) 
</TD></TR></TBODY></TABLE>
<P>Bedeutung der Flags:</P>
<P><STRONG>OPEN</STRONG> kann nur vom JAP gesendet werden und signalisiert den 
Aufbau einer neuen Surfverbindung (neues Verkettungsmerkmal VERK).</P>
<P><STRONG>CLOSE</STRONG> kann vom JAP oder vom letzten Mix gesendet werden. 
Browser ist nicht mehr an Daten interessiert bzw. Verbindung 
zusammengebrochen/geschlossen</P>
<P><STRONG>MORE_DATA</STRONG> kann vom letzten Mix oder vom Jap gesendet werden. 
Bedeutung: Es gibt noch mehr Daten auf der Verbindung bzw. Jap möchte gern noch 
mehr Daten bekommen</P>
<P>&nbsp;</P>
<H3>Algorithmus: Verarbeitung vom vorletzten Mix ankommender Upstream-Pakete im 
letzten Mix:</H3><PRE>forever {
  Asymmetrische Entschlüsselung
  KEYn-UP und KEYn-DN extrahieren
  Symmetrische Entschlüsselung
  VERK und FLG/LEN extrahieren
  if(VERK is in Table) {
    if( FLAG_CLOSE || FLAG_OPEN ) {
      remove table entry
      send CLOSE to JAP
    }
    if( FLAG_MORE_DATA ) {
      send data to proxy
      update table entry( KEYn-UP, KEYn-DN, 
                          CHAN, Packet-Counter)
      unpark socket
    }
  }
  else {
    if( (!FLAG_OPEN) || (!connect_to_proxy()==SUCCESS) ) {
      send CLOSE to JAP
    }
    else {
      send data to proxy
      put new entry into Table
    }
  }
}
</PRE>
<P>&nbsp;</P>
<H3>Aufbau der Kanal-Tabelle im letzten Mix</H3>
<TABLE cellSpacing=4 cellPadding=6>
  <TBODY>
  <TR>
    <TD class=payload>VERK
    <TD class=payload>Socket
    <TD class=payload>KEY-UP
    <TD class=payload>KEY-DN
    <TD class=payload>CHAN (Channel-ID)
    <TD class=payload>DownstreamPacketCounter </TD>
  <TR></TR>
  <TR>
    <TD class=payload>....
    <TD class=payload>....
    <TD class=payload>....
    <TD class=payload>....
    <TD class=payload>....
    <TD class=payload>.... </TR></TBODY></TABLE>
<H2>Downstream-Pakete</H2>
<TABLE cellSpacing=4 cellPadding=6 border=0>
  <TBODY>
  <TR>
    <TD class=chanid>CHAN<BR>4 Bytes</TD>
    <TD class=flags>SEQN<BR>4 Bytes</TD>
    <TD class=flags>FLG/LEN<BR>2 Bytes</TD>
    <TD class=payload>..................... PAYLOAD 
      .....................<BR>988 Bytes</TD></TR></TBODY></TABLE>
<P>&nbsp;</P>
<H3>Algorithmus: Verarbeitung der vom Proxy eintreffenden Daten im letzten 
Mix</H3>
<P><STRONG>Hinweis:</STRONG> Dieser Algorithmus ist insoweit vereinfacht, als 
dass er keinerlei Timeouts berücksichtigt.</P><PRE>forever {
  poll sockets
  foreach ( active socket ) {
    anz = receive(988Bytes from Proxy);
    if( anz &lt;= 0 ) {
      send CLOSE to JAP
      remove VERK from table
      close socket
    }
    else {
      send Daten to JAP (MORE_DATA Flag gesetzt)
      if(--DownstreamPacketCounter==0) {
        socket parken
      }
    }
  }
}
</PRE>
<HR>

<ADDRESS><A href="mailto:bavoigt@inf.fu-berlin.de">Bastian Voigt</A></ADDRESS><!-- Created: Wed Aug 20 12:03:55 CEST 2003 --><!-- hhmts start -->Last 
modified: Wed Aug 20 15:53:43 CEST 2003 <!-- hhmts end --></BODY></HTML>
